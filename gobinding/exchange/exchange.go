// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package exchange

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
)

// ExchangeMetaData contains all meta data concerning the Exchange contract.
var ExchangeMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"factoryAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenAmount\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReserve\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_ethSold\",\"type\":\"uint256\"}],\"name\":\"getTokenAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenSold\",\"type\":\"uint256\"}],\"name\":\"getEthAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minTokens\",\"type\":\"uint256\"}],\"name\":\"ethToTokenSwap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minTokens\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_recipient\",\"type\":\"address\"}],\"name\":\"ethToTokenTransfer\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokensSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minEth\",\"type\":\"uint256\"}],\"name\":\"tokenToEthSwap\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokensSold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minTokensBought\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"name\":\"tokenToTokenSwap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x60806040523480156200001157600080fd5b506040516200316f3803806200316f83398181016040528101906200003791906200029a565b6040518060400160405280600b81526020017f4d696e69737761702d56310000000000000000000000000000000000000000008152506040518060400160405280600781526020017f4d494e492d5631000000000000000000000000000000000000000000000000008152508160039080519060200190620000bb929190620001d3565b508060049080519060200190620000d4929190620001d3565b505050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614156200014a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200014190620002ed565b60405180910390fd5b80600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050620003fc565b828054620001e19062000354565b90600052602060002090601f01602090048101928262000205576000855562000251565b82601f106200022057805160ff191683800117855562000251565b8280016001018555821562000251579182015b828111156200025057825182559160200191906001019062000233565b5b50905062000260919062000264565b5090565b5b808211156200027f57600081600090555060010162000265565b5090565b6000815190506200029481620003e2565b92915050565b600060208284031215620002ad57600080fd5b6000620002bd8482850162000283565b91505092915050565b6000620002d56015836200030f565b9150620002e282620003b9565b602082019050919050565b600060208201905081810360008301526200030881620002c6565b9050919050565b600082825260208201905092915050565b60006200032d8262000334565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600060028204905060018216806200036d57607f821691505b602082108114156200038457620003836200038a565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f696e76616c696420746f6b656e20616464726573730000000000000000000000600082015250565b620003ed8162000320565b8114620003f957600080fd5b50565b612d63806200040c6000396000f3fe6080604052600436106101355760003560e01c806395d89b41116100ab578063a9059cbb1161006f578063a9059cbb1461045f578063c2507ac11461049c578063dd62ed3e146104d9578063e0486c8a14610516578063f7a7e32414610532578063f979dcd71461055b57610135565b806395d89b4114610363578063966dae0e1461038e5780639c8f9f23146103b95780639d76ea58146103f7578063a457c2d71461042257610135565b8063389d9a40116100fd578063389d9a4014610235578063395093511461025157806351c6590a1461028e57806359bf5d39146102be57806370a08231146102e95780638fc7a25d1461032657610135565b806306fdde031461013a578063095ea7b31461016557806318160ddd146101a257806323b872dd146101cd578063313ce5671461020a575b600080fd5b34801561014657600080fd5b5061014f610577565b60405161015c9190612386565b60405180910390f35b34801561017157600080fd5b5061018c60048036038101906101879190611eaa565b610609565b604051610199919061236b565b60405180910390f35b3480156101ae57600080fd5b506101b7610627565b6040516101c491906125c8565b60405180910390f35b3480156101d957600080fd5b506101f460048036038101906101ef9190611e5b565b610631565b604051610201919061236b565b60405180910390f35b34801561021657600080fd5b5061021f610729565b60405161022c9190612635565b60405180910390f35b61024f600480360381019061024a9190611f61565b610732565b005b34801561025d57600080fd5b5061027860048036038101906102739190611eaa565b610740565b604051610285919061236b565b60405180910390f35b6102a860048036038101906102a39190611f0f565b6107ec565b6040516102b591906125c8565b60405180910390f35b3480156102ca57600080fd5b506102d3610a38565b6040516102e091906125c8565b60405180910390f35b3480156102f557600080fd5b50610310600480360381019061030b9190611dcd565b610aea565b60405161031d91906125c8565b60405180910390f35b34801561033257600080fd5b5061034d60048036038101906103489190611f0f565b610b32565b60405161035a91906125c8565b60405180910390f35b34801561036f57600080fd5b50610378610b95565b6040516103859190612386565b60405180910390f35b34801561039a57600080fd5b506103a3610c27565b6040516103b091906122f0565b60405180910390f35b3480156103c557600080fd5b506103e060048036038101906103db9190611f0f565b610c4d565b6040516103ee92919061260c565b60405180910390f35b34801561040357600080fd5b5061040c610dec565b60405161041991906122f0565b60405180910390f35b34801561042e57600080fd5b5061044960048036038101906104449190611eaa565b610e12565b604051610456919061236b565b60405180910390f35b34801561046b57600080fd5b5061048660048036038101906104819190611eaa565b610efd565b604051610493919061236b565b60405180910390f35b3480156104a857600080fd5b506104c360048036038101906104be9190611f0f565b610f1b565b6040516104d091906125c8565b60405180910390f35b3480156104e557600080fd5b5061050060048036038101906104fb9190611e1f565b610f7e565b60405161050d91906125c8565b60405180910390f35b610530600480360381019061052b9190611f9d565b611005565b005b34801561053e57600080fd5b5061055960048036038101906105549190611fd9565b611162565b005b61057560048036038101906105709190611f0f565b6113fe565b005b60606003805461058690612809565b80601f01602080910402602001604051908101604052809291908181526020018280546105b290612809565b80156105ff5780601f106105d4576101008083540402835291602001916105ff565b820191906000526020600020905b8154815290600101906020018083116105e257829003601f168201915b5050505050905090565b600061061d61061661140b565b8484611413565b6001905092915050565b6000600254905090565b600061063e8484846115de565b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600061068961140b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610709576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070090612488565b60405180910390fd5b61071d8561071561140b565b858403611413565b60019150509392505050565b60006012905090565b61073c828261185f565b5050565b60006107e261074d61140b565b84846001600061075b61140b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546107dd919061266c565b611413565b6001905092915050565b6000806107f7610a38565b14156108cd576000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b81526004016108619392919061230b565b602060405180830381600087803b15801561087b57600080fd5b505af115801561088f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b39190611ee6565b5060004790506108c3338261197e565b8092505050610a33565b600034476108db919061274d565b905060006108e7610a38565b905060008282346108f891906126f3565b61090291906126c2565b905080851015610947576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093e90612528565b60405180910390fd5b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016109ab9392919061230b565b602060405180830381600087803b1580156109c557600080fd5b505af11580156109d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fd9190611ee6565b5060008434610a0a610627565b610a1491906126f3565b610a1e91906126c2565b9050610a2a338261197e565b80955050505050505b919050565b6000600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610a9591906122f0565b60206040518083038186803b158015610aad57600080fd5b505afa158015610ac1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae59190611f38565b905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000808211610b76576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b6d90612468565b60405180910390fd5b6000610b80610a38565b9050610b8d838247611ade565b915050919050565b606060048054610ba490612809565b80601f0160208091040260200160405190810160405280929190818152602001828054610bd090612809565b8015610c1d5780601f10610bf257610100808354040283529160200191610c1d565b820191906000526020600020905b815481529060010190602001808311610c0057829003601f168201915b5050505050905090565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060008311610c93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8a90612428565b60405180910390fd5b6000610c9d610627565b8447610ca991906126f3565b610cb391906126c2565b90506000610cbf610627565b85610cc8610a38565b610cd291906126f3565b610cdc91906126c2565b9050610ce83386611b83565b3373ffffffffffffffffffffffffffffffffffffffff166108fc839081150290604051600060405180830381858888f19350505050158015610d2e573d6000803e3d6000fd5b50600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b8152600401610d8c929190612342565b602060405180830381600087803b158015610da657600080fd5b505af1158015610dba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dde9190611ee6565b508181935093505050915091565b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008060016000610e2161140b565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610ede576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ed590612588565b60405180910390fd5b610ef2610ee961140b565b85858403611413565b600191505092915050565b6000610f11610f0a61140b565b84846115de565b6001905092915050565b6000808211610f5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f5690612448565b60405180910390fd5b6000610f69610a38565b9050610f76834783611ade565b915050919050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600061100f610a38565b9050600061101e848347611ade565b905082811015611063576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161105a906124e8565b60405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b81526004016110c29392919061230b565b602060405180830381600087803b1580156110dc57600080fd5b505af11580156110f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111149190611ee6565b503373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f1935050505015801561115b573d6000803e3d6000fd5b5050505050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166306f2bf62836040518263ffffffff1660e01b81526004016111bf91906122f0565b602060405180830381600087803b1580156111d957600080fd5b505af11580156111ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112119190611df6565b90503073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415801561127c5750600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b6112bb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b2906124a8565b60405180910390fd5b60006112c5610a38565b905060006112d4868347611ade565b9050600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330896040518463ffffffff1660e01b81526004016113359392919061230b565b602060405180830381600087803b15801561134f57600080fd5b505af1158015611363573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113879190611ee6565b508273ffffffffffffffffffffffffffffffffffffffff1663389d9a408287336040518463ffffffff1660e01b81526004016113c49291906125e3565b6000604051808303818588803b1580156113dd57600080fd5b505af11580156113f1573d6000803e3d6000fd5b5050505050505050505050565b611408813361185f565b50565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415611483576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161147a90612548565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156114f3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114ea906123e8565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516115d191906125c8565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561164e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161164590612508565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156116be576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116b5906123a8565b60405180910390fd5b6116c9838383611d5a565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508181101561174f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161174690612408565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546117e2919061266c565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161184691906125c8565b60405180910390a3611859848484611d5f565b50505050565b6000611869610a38565b9050600061188334344761187d919061274d565b84611ade565b9050838110156118c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118bf906124e8565b60405180910390fd5b600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84836040518363ffffffff1660e01b8152600401611925929190612342565b602060405180830381600087803b15801561193f57600080fd5b505af1158015611953573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119779190611ee6565b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156119ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119e5906125a8565b60405180910390fd5b6119fa60008383611d5a565b8060026000828254611a0c919061266c565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611a61919061266c565b925050819055508173ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051611ac691906125c8565b60405180910390a3611ada60008383611d5f565b5050565b60008083118015611aef5750600082115b611b2e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b2590612568565b60405180910390fd5b6000606385611b3d91906126f3565b905060008382611b4d91906126f3565b9050600082606487611b5f91906126f3565b611b69919061266c565b90508082611b7791906126c2565b93505050509392505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415611bf3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bea906124c8565b60405180910390fd5b611bff82600083611d5a565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015611c85576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c7c906123c8565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508160026000828254611cdc919061274d565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611d4191906125c8565b60405180910390a3611d5583600084611d5f565b505050565b505050565b505050565b600081359050611d7381612ce8565b92915050565b600081519050611d8881612ce8565b92915050565b600081519050611d9d81612cff565b92915050565b600081359050611db281612d16565b92915050565b600081519050611dc781612d16565b92915050565b600060208284031215611ddf57600080fd5b6000611ded84828501611d64565b91505092915050565b600060208284031215611e0857600080fd5b6000611e1684828501611d79565b91505092915050565b60008060408385031215611e3257600080fd5b6000611e4085828601611d64565b9250506020611e5185828601611d64565b9150509250929050565b600080600060608486031215611e7057600080fd5b6000611e7e86828701611d64565b9350506020611e8f86828701611d64565b9250506040611ea086828701611da3565b9150509250925092565b60008060408385031215611ebd57600080fd5b6000611ecb85828601611d64565b9250506020611edc85828601611da3565b9150509250929050565b600060208284031215611ef857600080fd5b6000611f0684828501611d8e565b91505092915050565b600060208284031215611f2157600080fd5b6000611f2f84828501611da3565b91505092915050565b600060208284031215611f4a57600080fd5b6000611f5884828501611db8565b91505092915050565b60008060408385031215611f7457600080fd5b6000611f8285828601611da3565b9250506020611f9385828601611d64565b9150509250929050565b60008060408385031215611fb057600080fd5b6000611fbe85828601611da3565b9250506020611fcf85828601611da3565b9150509250929050565b600080600060608486031215611fee57600080fd5b6000611ffc86828701611da3565b935050602061200d86828701611da3565b925050604061201e86828701611d64565b9150509250925092565b61203181612781565b82525050565b61204081612793565b82525050565b600061205182612650565b61205b818561265b565b935061206b8185602086016127d6565b612074816128c8565b840191505092915050565b600061208c60238361265b565b9150612097826128d9565b604082019050919050565b60006120af60228361265b565b91506120ba82612928565b604082019050919050565b60006120d260228361265b565b91506120dd82612977565b604082019050919050565b60006120f560268361265b565b9150612100826129c6565b604082019050919050565b6000612118600e8361265b565b915061212382612a15565b602082019050919050565b600061213b60148361265b565b915061214682612a3e565b602082019050919050565b600061215e60168361265b565b915061216982612a67565b602082019050919050565b600061218160288361265b565b915061218c82612a90565b604082019050919050565b60006121a460188361265b565b91506121af82612adf565b602082019050919050565b60006121c760218361265b565b91506121d282612b08565b604082019050919050565b60006121ea601a8361265b565b91506121f582612b57565b602082019050919050565b600061220d60258361265b565b915061221882612b80565b604082019050919050565b600061223060198361265b565b915061223b82612bcf565b602082019050919050565b600061225360248361265b565b915061225e82612bf8565b604082019050919050565b600061227660108361265b565b915061228182612c47565b602082019050919050565b600061229960258361265b565b91506122a482612c70565b604082019050919050565b60006122bc601f8361265b565b91506122c782612cbf565b602082019050919050565b6122db816127bf565b82525050565b6122ea816127c9565b82525050565b60006020820190506123056000830184612028565b92915050565b60006060820190506123206000830186612028565b61232d6020830185612028565b61233a60408301846122d2565b949350505050565b60006040820190506123576000830185612028565b61236460208301846122d2565b9392505050565b60006020820190506123806000830184612037565b92915050565b600060208201905081810360008301526123a08184612046565b905092915050565b600060208201905081810360008301526123c18161207f565b9050919050565b600060208201905081810360008301526123e1816120a2565b9050919050565b60006020820190508181036000830152612401816120c5565b9050919050565b60006020820190508181036000830152612421816120e8565b9050919050565b600060208201905081810360008301526124418161210b565b9050919050565b600060208201905081810360008301526124618161212e565b9050919050565b6000602082019050818103600083015261248181612151565b9050919050565b600060208201905081810360008301526124a181612174565b9050919050565b600060208201905081810360008301526124c181612197565b9050919050565b600060208201905081810360008301526124e1816121ba565b9050919050565b60006020820190508181036000830152612501816121dd565b9050919050565b6000602082019050818103600083015261252181612200565b9050919050565b6000602082019050818103600083015261254181612223565b9050919050565b6000602082019050818103600083015261256181612246565b9050919050565b6000602082019050818103600083015261258181612269565b9050919050565b600060208201905081810360008301526125a18161228c565b9050919050565b600060208201905081810360008301526125c1816122af565b9050919050565b60006020820190506125dd60008301846122d2565b92915050565b60006040820190506125f860008301856122d2565b6126056020830184612028565b9392505050565b600060408201905061262160008301856122d2565b61262e60208301846122d2565b9392505050565b600060208201905061264a60008301846122e1565b92915050565b600081519050919050565b600082825260208201905092915050565b6000612677826127bf565b9150612682836127bf565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156126b7576126b661283b565b5b828201905092915050565b60006126cd826127bf565b91506126d8836127bf565b9250826126e8576126e761286a565b5b828204905092915050565b60006126fe826127bf565b9150612709836127bf565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156127425761274161283b565b5b828202905092915050565b6000612758826127bf565b9150612763836127bf565b9250828210156127765761277561283b565b5b828203905092915050565b600061278c8261279f565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b60005b838110156127f45780820151818401526020810190506127d9565b83811115612803576000848401525b50505050565b6000600282049050600182168061282157607f821691505b6020821081141561283557612834612899565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f8301169050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b7f696e76616c696420616d6f756e74000000000000000000000000000000000000600082015250565b7f657468536f6c6420697320746f6f20736d616c6c000000000000000000000000600082015250565b7f746f6b656e536f6c6420697320746f6f20736d616c6c00000000000000000000600082015250565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206160008201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b7f696e76616c69642065786368616e676520616464726573730000000000000000600082015250565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b7f696e73756666696369656e74206f757470757420616d6f756e74000000000000600082015250565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b7f696e73756666696369656e7420746f6b656e20616d6f756e7400000000000000600082015250565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b7f696e76616c696420726573657276657300000000000000000000000000000000600082015250565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b612cf181612781565b8114612cfc57600080fd5b50565b612d0881612793565b8114612d1357600080fd5b50565b612d1f816127bf565b8114612d2a57600080fd5b5056fea26469706673582212201f53432c455d196c0e2f630297d93d2ad2a48871e5593cccbdb95dfbfdb5818364736f6c63430008040033",
}

// ExchangeABI is the input ABI used to generate the binding from.
// Deprecated: Use ExchangeMetaData.ABI instead.
var ExchangeABI = ExchangeMetaData.ABI

// ExchangeBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ExchangeMetaData.Bin instead.
var ExchangeBin = ExchangeMetaData.Bin

// DeployExchange deploys a new Ethereum contract, binding an instance of Exchange to it.
func DeployExchange(auth *bind.TransactOpts, backend bind.ContractBackend, _token common.Address) (common.Address, *types.Transaction, *Exchange, error) {
	parsed, err := ExchangeMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ExchangeBin), backend, _token)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &Exchange{ExchangeCaller: ExchangeCaller{contract: contract}, ExchangeTransactor: ExchangeTransactor{contract: contract}, ExchangeFilterer: ExchangeFilterer{contract: contract}}, nil
}

// Exchange is an auto generated Go binding around an Ethereum contract.
type Exchange struct {
	ExchangeCaller     // Read-only binding to the contract
	ExchangeTransactor // Write-only binding to the contract
	ExchangeFilterer   // Log filterer for contract events
}

// ExchangeCaller is an auto generated read-only Go binding around an Ethereum contract.
type ExchangeCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ExchangeTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ExchangeTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ExchangeFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ExchangeFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ExchangeSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ExchangeSession struct {
	Contract     *Exchange         // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ExchangeCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ExchangeCallerSession struct {
	Contract *ExchangeCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts   // Call options to use throughout this session
}

// ExchangeTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ExchangeTransactorSession struct {
	Contract     *ExchangeTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts   // Transaction auth options to use throughout this session
}

// ExchangeRaw is an auto generated low-level Go binding around an Ethereum contract.
type ExchangeRaw struct {
	Contract *Exchange // Generic contract binding to access the raw methods on
}

// ExchangeCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ExchangeCallerRaw struct {
	Contract *ExchangeCaller // Generic read-only contract binding to access the raw methods on
}

// ExchangeTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ExchangeTransactorRaw struct {
	Contract *ExchangeTransactor // Generic write-only contract binding to access the raw methods on
}

// NewExchange creates a new instance of Exchange, bound to a specific deployed contract.
func NewExchange(address common.Address, backend bind.ContractBackend) (*Exchange, error) {
	contract, err := bindExchange(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &Exchange{ExchangeCaller: ExchangeCaller{contract: contract}, ExchangeTransactor: ExchangeTransactor{contract: contract}, ExchangeFilterer: ExchangeFilterer{contract: contract}}, nil
}

// NewExchangeCaller creates a new read-only instance of Exchange, bound to a specific deployed contract.
func NewExchangeCaller(address common.Address, caller bind.ContractCaller) (*ExchangeCaller, error) {
	contract, err := bindExchange(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ExchangeCaller{contract: contract}, nil
}

// NewExchangeTransactor creates a new write-only instance of Exchange, bound to a specific deployed contract.
func NewExchangeTransactor(address common.Address, transactor bind.ContractTransactor) (*ExchangeTransactor, error) {
	contract, err := bindExchange(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ExchangeTransactor{contract: contract}, nil
}

// NewExchangeFilterer creates a new log filterer instance of Exchange, bound to a specific deployed contract.
func NewExchangeFilterer(address common.Address, filterer bind.ContractFilterer) (*ExchangeFilterer, error) {
	contract, err := bindExchange(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ExchangeFilterer{contract: contract}, nil
}

// bindExchange binds a generic wrapper to an already deployed contract.
func bindExchange(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := abi.JSON(strings.NewReader(ExchangeABI))
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Exchange *ExchangeRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Exchange.Contract.ExchangeCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Exchange *ExchangeRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Exchange.Contract.ExchangeTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Exchange *ExchangeRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Exchange.Contract.ExchangeTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_Exchange *ExchangeCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _Exchange.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_Exchange *ExchangeTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _Exchange.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_Exchange *ExchangeTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _Exchange.Contract.contract.Transact(opts, method, params...)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Exchange *ExchangeCaller) Allowance(opts *bind.CallOpts, owner common.Address, spender common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Exchange.contract.Call(opts, &out, "allowance", owner, spender)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Exchange *ExchangeSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Exchange.Contract.Allowance(&_Exchange.CallOpts, owner, spender)
}

// Allowance is a free data retrieval call binding the contract method 0xdd62ed3e.
//
// Solidity: function allowance(address owner, address spender) view returns(uint256)
func (_Exchange *ExchangeCallerSession) Allowance(owner common.Address, spender common.Address) (*big.Int, error) {
	return _Exchange.Contract.Allowance(&_Exchange.CallOpts, owner, spender)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Exchange *ExchangeCaller) BalanceOf(opts *bind.CallOpts, account common.Address) (*big.Int, error) {
	var out []interface{}
	err := _Exchange.contract.Call(opts, &out, "balanceOf", account)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Exchange *ExchangeSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _Exchange.Contract.BalanceOf(&_Exchange.CallOpts, account)
}

// BalanceOf is a free data retrieval call binding the contract method 0x70a08231.
//
// Solidity: function balanceOf(address account) view returns(uint256)
func (_Exchange *ExchangeCallerSession) BalanceOf(account common.Address) (*big.Int, error) {
	return _Exchange.Contract.BalanceOf(&_Exchange.CallOpts, account)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Exchange *ExchangeCaller) Decimals(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _Exchange.contract.Call(opts, &out, "decimals")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Exchange *ExchangeSession) Decimals() (uint8, error) {
	return _Exchange.Contract.Decimals(&_Exchange.CallOpts)
}

// Decimals is a free data retrieval call binding the contract method 0x313ce567.
//
// Solidity: function decimals() view returns(uint8)
func (_Exchange *ExchangeCallerSession) Decimals() (uint8, error) {
	return _Exchange.Contract.Decimals(&_Exchange.CallOpts)
}

// FactoryAddress is a free data retrieval call binding the contract method 0x966dae0e.
//
// Solidity: function factoryAddress() view returns(address)
func (_Exchange *ExchangeCaller) FactoryAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Exchange.contract.Call(opts, &out, "factoryAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// FactoryAddress is a free data retrieval call binding the contract method 0x966dae0e.
//
// Solidity: function factoryAddress() view returns(address)
func (_Exchange *ExchangeSession) FactoryAddress() (common.Address, error) {
	return _Exchange.Contract.FactoryAddress(&_Exchange.CallOpts)
}

// FactoryAddress is a free data retrieval call binding the contract method 0x966dae0e.
//
// Solidity: function factoryAddress() view returns(address)
func (_Exchange *ExchangeCallerSession) FactoryAddress() (common.Address, error) {
	return _Exchange.Contract.FactoryAddress(&_Exchange.CallOpts)
}

// GetEthAmount is a free data retrieval call binding the contract method 0x8fc7a25d.
//
// Solidity: function getEthAmount(uint256 _tokenSold) view returns(uint256)
func (_Exchange *ExchangeCaller) GetEthAmount(opts *bind.CallOpts, _tokenSold *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Exchange.contract.Call(opts, &out, "getEthAmount", _tokenSold)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetEthAmount is a free data retrieval call binding the contract method 0x8fc7a25d.
//
// Solidity: function getEthAmount(uint256 _tokenSold) view returns(uint256)
func (_Exchange *ExchangeSession) GetEthAmount(_tokenSold *big.Int) (*big.Int, error) {
	return _Exchange.Contract.GetEthAmount(&_Exchange.CallOpts, _tokenSold)
}

// GetEthAmount is a free data retrieval call binding the contract method 0x8fc7a25d.
//
// Solidity: function getEthAmount(uint256 _tokenSold) view returns(uint256)
func (_Exchange *ExchangeCallerSession) GetEthAmount(_tokenSold *big.Int) (*big.Int, error) {
	return _Exchange.Contract.GetEthAmount(&_Exchange.CallOpts, _tokenSold)
}

// GetReserve is a free data retrieval call binding the contract method 0x59bf5d39.
//
// Solidity: function getReserve() view returns(uint256)
func (_Exchange *ExchangeCaller) GetReserve(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Exchange.contract.Call(opts, &out, "getReserve")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetReserve is a free data retrieval call binding the contract method 0x59bf5d39.
//
// Solidity: function getReserve() view returns(uint256)
func (_Exchange *ExchangeSession) GetReserve() (*big.Int, error) {
	return _Exchange.Contract.GetReserve(&_Exchange.CallOpts)
}

// GetReserve is a free data retrieval call binding the contract method 0x59bf5d39.
//
// Solidity: function getReserve() view returns(uint256)
func (_Exchange *ExchangeCallerSession) GetReserve() (*big.Int, error) {
	return _Exchange.Contract.GetReserve(&_Exchange.CallOpts)
}

// GetTokenAmount is a free data retrieval call binding the contract method 0xc2507ac1.
//
// Solidity: function getTokenAmount(uint256 _ethSold) view returns(uint256)
func (_Exchange *ExchangeCaller) GetTokenAmount(opts *bind.CallOpts, _ethSold *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _Exchange.contract.Call(opts, &out, "getTokenAmount", _ethSold)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTokenAmount is a free data retrieval call binding the contract method 0xc2507ac1.
//
// Solidity: function getTokenAmount(uint256 _ethSold) view returns(uint256)
func (_Exchange *ExchangeSession) GetTokenAmount(_ethSold *big.Int) (*big.Int, error) {
	return _Exchange.Contract.GetTokenAmount(&_Exchange.CallOpts, _ethSold)
}

// GetTokenAmount is a free data retrieval call binding the contract method 0xc2507ac1.
//
// Solidity: function getTokenAmount(uint256 _ethSold) view returns(uint256)
func (_Exchange *ExchangeCallerSession) GetTokenAmount(_ethSold *big.Int) (*big.Int, error) {
	return _Exchange.Contract.GetTokenAmount(&_Exchange.CallOpts, _ethSold)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Exchange *ExchangeCaller) Name(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Exchange.contract.Call(opts, &out, "name")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Exchange *ExchangeSession) Name() (string, error) {
	return _Exchange.Contract.Name(&_Exchange.CallOpts)
}

// Name is a free data retrieval call binding the contract method 0x06fdde03.
//
// Solidity: function name() view returns(string)
func (_Exchange *ExchangeCallerSession) Name() (string, error) {
	return _Exchange.Contract.Name(&_Exchange.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Exchange *ExchangeCaller) Symbol(opts *bind.CallOpts) (string, error) {
	var out []interface{}
	err := _Exchange.contract.Call(opts, &out, "symbol")

	if err != nil {
		return *new(string), err
	}

	out0 := *abi.ConvertType(out[0], new(string)).(*string)

	return out0, err

}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Exchange *ExchangeSession) Symbol() (string, error) {
	return _Exchange.Contract.Symbol(&_Exchange.CallOpts)
}

// Symbol is a free data retrieval call binding the contract method 0x95d89b41.
//
// Solidity: function symbol() view returns(string)
func (_Exchange *ExchangeCallerSession) Symbol() (string, error) {
	return _Exchange.Contract.Symbol(&_Exchange.CallOpts)
}

// TokenAddress is a free data retrieval call binding the contract method 0x9d76ea58.
//
// Solidity: function tokenAddress() view returns(address)
func (_Exchange *ExchangeCaller) TokenAddress(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _Exchange.contract.Call(opts, &out, "tokenAddress")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TokenAddress is a free data retrieval call binding the contract method 0x9d76ea58.
//
// Solidity: function tokenAddress() view returns(address)
func (_Exchange *ExchangeSession) TokenAddress() (common.Address, error) {
	return _Exchange.Contract.TokenAddress(&_Exchange.CallOpts)
}

// TokenAddress is a free data retrieval call binding the contract method 0x9d76ea58.
//
// Solidity: function tokenAddress() view returns(address)
func (_Exchange *ExchangeCallerSession) TokenAddress() (common.Address, error) {
	return _Exchange.Contract.TokenAddress(&_Exchange.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Exchange *ExchangeCaller) TotalSupply(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _Exchange.contract.Call(opts, &out, "totalSupply")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Exchange *ExchangeSession) TotalSupply() (*big.Int, error) {
	return _Exchange.Contract.TotalSupply(&_Exchange.CallOpts)
}

// TotalSupply is a free data retrieval call binding the contract method 0x18160ddd.
//
// Solidity: function totalSupply() view returns(uint256)
func (_Exchange *ExchangeCallerSession) TotalSupply() (*big.Int, error) {
	return _Exchange.Contract.TotalSupply(&_Exchange.CallOpts)
}

// AddLiquidity is a paid mutator transaction binding the contract method 0x51c6590a.
//
// Solidity: function addLiquidity(uint256 _tokenAmount) payable returns(uint256)
func (_Exchange *ExchangeTransactor) AddLiquidity(opts *bind.TransactOpts, _tokenAmount *big.Int) (*types.Transaction, error) {
	return _Exchange.contract.Transact(opts, "addLiquidity", _tokenAmount)
}

// AddLiquidity is a paid mutator transaction binding the contract method 0x51c6590a.
//
// Solidity: function addLiquidity(uint256 _tokenAmount) payable returns(uint256)
func (_Exchange *ExchangeSession) AddLiquidity(_tokenAmount *big.Int) (*types.Transaction, error) {
	return _Exchange.Contract.AddLiquidity(&_Exchange.TransactOpts, _tokenAmount)
}

// AddLiquidity is a paid mutator transaction binding the contract method 0x51c6590a.
//
// Solidity: function addLiquidity(uint256 _tokenAmount) payable returns(uint256)
func (_Exchange *ExchangeTransactorSession) AddLiquidity(_tokenAmount *big.Int) (*types.Transaction, error) {
	return _Exchange.Contract.AddLiquidity(&_Exchange.TransactOpts, _tokenAmount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Exchange *ExchangeTransactor) Approve(opts *bind.TransactOpts, spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Exchange.contract.Transact(opts, "approve", spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Exchange *ExchangeSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Exchange.Contract.Approve(&_Exchange.TransactOpts, spender, amount)
}

// Approve is a paid mutator transaction binding the contract method 0x095ea7b3.
//
// Solidity: function approve(address spender, uint256 amount) returns(bool)
func (_Exchange *ExchangeTransactorSession) Approve(spender common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Exchange.Contract.Approve(&_Exchange.TransactOpts, spender, amount)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Exchange *ExchangeTransactor) DecreaseAllowance(opts *bind.TransactOpts, spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Exchange.contract.Transact(opts, "decreaseAllowance", spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Exchange *ExchangeSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Exchange.Contract.DecreaseAllowance(&_Exchange.TransactOpts, spender, subtractedValue)
}

// DecreaseAllowance is a paid mutator transaction binding the contract method 0xa457c2d7.
//
// Solidity: function decreaseAllowance(address spender, uint256 subtractedValue) returns(bool)
func (_Exchange *ExchangeTransactorSession) DecreaseAllowance(spender common.Address, subtractedValue *big.Int) (*types.Transaction, error) {
	return _Exchange.Contract.DecreaseAllowance(&_Exchange.TransactOpts, spender, subtractedValue)
}

// EthToTokenSwap is a paid mutator transaction binding the contract method 0xf979dcd7.
//
// Solidity: function ethToTokenSwap(uint256 _minTokens) payable returns()
func (_Exchange *ExchangeTransactor) EthToTokenSwap(opts *bind.TransactOpts, _minTokens *big.Int) (*types.Transaction, error) {
	return _Exchange.contract.Transact(opts, "ethToTokenSwap", _minTokens)
}

// EthToTokenSwap is a paid mutator transaction binding the contract method 0xf979dcd7.
//
// Solidity: function ethToTokenSwap(uint256 _minTokens) payable returns()
func (_Exchange *ExchangeSession) EthToTokenSwap(_minTokens *big.Int) (*types.Transaction, error) {
	return _Exchange.Contract.EthToTokenSwap(&_Exchange.TransactOpts, _minTokens)
}

// EthToTokenSwap is a paid mutator transaction binding the contract method 0xf979dcd7.
//
// Solidity: function ethToTokenSwap(uint256 _minTokens) payable returns()
func (_Exchange *ExchangeTransactorSession) EthToTokenSwap(_minTokens *big.Int) (*types.Transaction, error) {
	return _Exchange.Contract.EthToTokenSwap(&_Exchange.TransactOpts, _minTokens)
}

// EthToTokenTransfer is a paid mutator transaction binding the contract method 0x389d9a40.
//
// Solidity: function ethToTokenTransfer(uint256 _minTokens, address _recipient) payable returns()
func (_Exchange *ExchangeTransactor) EthToTokenTransfer(opts *bind.TransactOpts, _minTokens *big.Int, _recipient common.Address) (*types.Transaction, error) {
	return _Exchange.contract.Transact(opts, "ethToTokenTransfer", _minTokens, _recipient)
}

// EthToTokenTransfer is a paid mutator transaction binding the contract method 0x389d9a40.
//
// Solidity: function ethToTokenTransfer(uint256 _minTokens, address _recipient) payable returns()
func (_Exchange *ExchangeSession) EthToTokenTransfer(_minTokens *big.Int, _recipient common.Address) (*types.Transaction, error) {
	return _Exchange.Contract.EthToTokenTransfer(&_Exchange.TransactOpts, _minTokens, _recipient)
}

// EthToTokenTransfer is a paid mutator transaction binding the contract method 0x389d9a40.
//
// Solidity: function ethToTokenTransfer(uint256 _minTokens, address _recipient) payable returns()
func (_Exchange *ExchangeTransactorSession) EthToTokenTransfer(_minTokens *big.Int, _recipient common.Address) (*types.Transaction, error) {
	return _Exchange.Contract.EthToTokenTransfer(&_Exchange.TransactOpts, _minTokens, _recipient)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Exchange *ExchangeTransactor) IncreaseAllowance(opts *bind.TransactOpts, spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Exchange.contract.Transact(opts, "increaseAllowance", spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Exchange *ExchangeSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Exchange.Contract.IncreaseAllowance(&_Exchange.TransactOpts, spender, addedValue)
}

// IncreaseAllowance is a paid mutator transaction binding the contract method 0x39509351.
//
// Solidity: function increaseAllowance(address spender, uint256 addedValue) returns(bool)
func (_Exchange *ExchangeTransactorSession) IncreaseAllowance(spender common.Address, addedValue *big.Int) (*types.Transaction, error) {
	return _Exchange.Contract.IncreaseAllowance(&_Exchange.TransactOpts, spender, addedValue)
}

// RemoveLiquidity is a paid mutator transaction binding the contract method 0x9c8f9f23.
//
// Solidity: function removeLiquidity(uint256 _amount) returns(uint256, uint256)
func (_Exchange *ExchangeTransactor) RemoveLiquidity(opts *bind.TransactOpts, _amount *big.Int) (*types.Transaction, error) {
	return _Exchange.contract.Transact(opts, "removeLiquidity", _amount)
}

// RemoveLiquidity is a paid mutator transaction binding the contract method 0x9c8f9f23.
//
// Solidity: function removeLiquidity(uint256 _amount) returns(uint256, uint256)
func (_Exchange *ExchangeSession) RemoveLiquidity(_amount *big.Int) (*types.Transaction, error) {
	return _Exchange.Contract.RemoveLiquidity(&_Exchange.TransactOpts, _amount)
}

// RemoveLiquidity is a paid mutator transaction binding the contract method 0x9c8f9f23.
//
// Solidity: function removeLiquidity(uint256 _amount) returns(uint256, uint256)
func (_Exchange *ExchangeTransactorSession) RemoveLiquidity(_amount *big.Int) (*types.Transaction, error) {
	return _Exchange.Contract.RemoveLiquidity(&_Exchange.TransactOpts, _amount)
}

// TokenToEthSwap is a paid mutator transaction binding the contract method 0xe0486c8a.
//
// Solidity: function tokenToEthSwap(uint256 _tokensSold, uint256 _minEth) payable returns()
func (_Exchange *ExchangeTransactor) TokenToEthSwap(opts *bind.TransactOpts, _tokensSold *big.Int, _minEth *big.Int) (*types.Transaction, error) {
	return _Exchange.contract.Transact(opts, "tokenToEthSwap", _tokensSold, _minEth)
}

// TokenToEthSwap is a paid mutator transaction binding the contract method 0xe0486c8a.
//
// Solidity: function tokenToEthSwap(uint256 _tokensSold, uint256 _minEth) payable returns()
func (_Exchange *ExchangeSession) TokenToEthSwap(_tokensSold *big.Int, _minEth *big.Int) (*types.Transaction, error) {
	return _Exchange.Contract.TokenToEthSwap(&_Exchange.TransactOpts, _tokensSold, _minEth)
}

// TokenToEthSwap is a paid mutator transaction binding the contract method 0xe0486c8a.
//
// Solidity: function tokenToEthSwap(uint256 _tokensSold, uint256 _minEth) payable returns()
func (_Exchange *ExchangeTransactorSession) TokenToEthSwap(_tokensSold *big.Int, _minEth *big.Int) (*types.Transaction, error) {
	return _Exchange.Contract.TokenToEthSwap(&_Exchange.TransactOpts, _tokensSold, _minEth)
}

// TokenToTokenSwap is a paid mutator transaction binding the contract method 0xf7a7e324.
//
// Solidity: function tokenToTokenSwap(uint256 _tokensSold, uint256 _minTokensBought, address _tokenAddress) returns()
func (_Exchange *ExchangeTransactor) TokenToTokenSwap(opts *bind.TransactOpts, _tokensSold *big.Int, _minTokensBought *big.Int, _tokenAddress common.Address) (*types.Transaction, error) {
	return _Exchange.contract.Transact(opts, "tokenToTokenSwap", _tokensSold, _minTokensBought, _tokenAddress)
}

// TokenToTokenSwap is a paid mutator transaction binding the contract method 0xf7a7e324.
//
// Solidity: function tokenToTokenSwap(uint256 _tokensSold, uint256 _minTokensBought, address _tokenAddress) returns()
func (_Exchange *ExchangeSession) TokenToTokenSwap(_tokensSold *big.Int, _minTokensBought *big.Int, _tokenAddress common.Address) (*types.Transaction, error) {
	return _Exchange.Contract.TokenToTokenSwap(&_Exchange.TransactOpts, _tokensSold, _minTokensBought, _tokenAddress)
}

// TokenToTokenSwap is a paid mutator transaction binding the contract method 0xf7a7e324.
//
// Solidity: function tokenToTokenSwap(uint256 _tokensSold, uint256 _minTokensBought, address _tokenAddress) returns()
func (_Exchange *ExchangeTransactorSession) TokenToTokenSwap(_tokensSold *big.Int, _minTokensBought *big.Int, _tokenAddress common.Address) (*types.Transaction, error) {
	return _Exchange.Contract.TokenToTokenSwap(&_Exchange.TransactOpts, _tokensSold, _minTokensBought, _tokenAddress)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_Exchange *ExchangeTransactor) Transfer(opts *bind.TransactOpts, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Exchange.contract.Transact(opts, "transfer", recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_Exchange *ExchangeSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Exchange.Contract.Transfer(&_Exchange.TransactOpts, recipient, amount)
}

// Transfer is a paid mutator transaction binding the contract method 0xa9059cbb.
//
// Solidity: function transfer(address recipient, uint256 amount) returns(bool)
func (_Exchange *ExchangeTransactorSession) Transfer(recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Exchange.Contract.Transfer(&_Exchange.TransactOpts, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_Exchange *ExchangeTransactor) TransferFrom(opts *bind.TransactOpts, sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Exchange.contract.Transact(opts, "transferFrom", sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_Exchange *ExchangeSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Exchange.Contract.TransferFrom(&_Exchange.TransactOpts, sender, recipient, amount)
}

// TransferFrom is a paid mutator transaction binding the contract method 0x23b872dd.
//
// Solidity: function transferFrom(address sender, address recipient, uint256 amount) returns(bool)
func (_Exchange *ExchangeTransactorSession) TransferFrom(sender common.Address, recipient common.Address, amount *big.Int) (*types.Transaction, error) {
	return _Exchange.Contract.TransferFrom(&_Exchange.TransactOpts, sender, recipient, amount)
}

// ExchangeApprovalIterator is returned from FilterApproval and is used to iterate over the raw logs and unpacked data for Approval events raised by the Exchange contract.
type ExchangeApprovalIterator struct {
	Event *ExchangeApproval // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExchangeApprovalIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExchangeApproval)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExchangeApproval)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExchangeApprovalIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExchangeApprovalIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExchangeApproval represents a Approval event raised by the Exchange contract.
type ExchangeApproval struct {
	Owner   common.Address
	Spender common.Address
	Value   *big.Int
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterApproval is a free log retrieval operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Exchange *ExchangeFilterer) FilterApproval(opts *bind.FilterOpts, owner []common.Address, spender []common.Address) (*ExchangeApprovalIterator, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Exchange.contract.FilterLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return &ExchangeApprovalIterator{contract: _Exchange.contract, event: "Approval", logs: logs, sub: sub}, nil
}

// WatchApproval is a free log subscription operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Exchange *ExchangeFilterer) WatchApproval(opts *bind.WatchOpts, sink chan<- *ExchangeApproval, owner []common.Address, spender []common.Address) (event.Subscription, error) {

	var ownerRule []interface{}
	for _, ownerItem := range owner {
		ownerRule = append(ownerRule, ownerItem)
	}
	var spenderRule []interface{}
	for _, spenderItem := range spender {
		spenderRule = append(spenderRule, spenderItem)
	}

	logs, sub, err := _Exchange.contract.WatchLogs(opts, "Approval", ownerRule, spenderRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExchangeApproval)
				if err := _Exchange.contract.UnpackLog(event, "Approval", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseApproval is a log parse operation binding the contract event 0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925.
//
// Solidity: event Approval(address indexed owner, address indexed spender, uint256 value)
func (_Exchange *ExchangeFilterer) ParseApproval(log types.Log) (*ExchangeApproval, error) {
	event := new(ExchangeApproval)
	if err := _Exchange.contract.UnpackLog(event, "Approval", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ExchangeTransferIterator is returned from FilterTransfer and is used to iterate over the raw logs and unpacked data for Transfer events raised by the Exchange contract.
type ExchangeTransferIterator struct {
	Event *ExchangeTransfer // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ExchangeTransferIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ExchangeTransfer)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ExchangeTransfer)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ExchangeTransferIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ExchangeTransferIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ExchangeTransfer represents a Transfer event raised by the Exchange contract.
type ExchangeTransfer struct {
	From  common.Address
	To    common.Address
	Value *big.Int
	Raw   types.Log // Blockchain specific contextual infos
}

// FilterTransfer is a free log retrieval operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Exchange *ExchangeFilterer) FilterTransfer(opts *bind.FilterOpts, from []common.Address, to []common.Address) (*ExchangeTransferIterator, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Exchange.contract.FilterLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return &ExchangeTransferIterator{contract: _Exchange.contract, event: "Transfer", logs: logs, sub: sub}, nil
}

// WatchTransfer is a free log subscription operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Exchange *ExchangeFilterer) WatchTransfer(opts *bind.WatchOpts, sink chan<- *ExchangeTransfer, from []common.Address, to []common.Address) (event.Subscription, error) {

	var fromRule []interface{}
	for _, fromItem := range from {
		fromRule = append(fromRule, fromItem)
	}
	var toRule []interface{}
	for _, toItem := range to {
		toRule = append(toRule, toItem)
	}

	logs, sub, err := _Exchange.contract.WatchLogs(opts, "Transfer", fromRule, toRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ExchangeTransfer)
				if err := _Exchange.contract.UnpackLog(event, "Transfer", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseTransfer is a log parse operation binding the contract event 0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef.
//
// Solidity: event Transfer(address indexed from, address indexed to, uint256 value)
func (_Exchange *ExchangeFilterer) ParseTransfer(log types.Log) (*ExchangeTransfer, error) {
	event := new(ExchangeTransfer)
	if err := _Exchange.contract.UnpackLog(event, "Transfer", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
